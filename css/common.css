/*COMMON*/
body {
    font-family: "Nanum Gothic", sans-serif;
    font-size: 16px;
    font-weight: 400;
    line-height: 1.4;
    /* 기본 글꼴 크기의 1.4배를 의미한다 */
    color: #333;
  }
  a {
    text-decoration: none;
  }
  img {
    /* img(인라인 요소) 하단에 Baseline 공백을 제거 */
    display: block;
  }
  /* 위와 같이 태그의 기본 설정을 처리해준다
  a 태그는 밑줄을 없애주겠다!!
  img 태그는 인라인이 아닌 블록으로 처리해주겠다! */
  
  /*INNER*/
  /* inner 라는 클래스도 공통으로 사용되기 때문에 이렇게 빼준다 */
  .inner {
    width: 1100px;
    margin: 0 auto;
    /* 가운데 정렬처리 위에 width 설정함 */
    position: relative;
  }
  
  /*BUTTON*/
  /* 14) 버튼의 요소(자세히보기 부분)을 공통으로
  처리하기 위해 아래와 같이 따로 빼두는 처리 */
  .btn {
    width: 130px;
    padding: 10px;
    border: 2px solid #333;
    border-radius: 4px;
    color: #333;
    font-size: 16px;
    font-weight: 700;
    text-align: center;
    cursor: pointer;
    box-sizing: border-box;
    /* 14) padding + border 까지 계산되도록 처리
    버튼 요소이기 때문에 이렇게 통일 밑작업 처리 */
    display: block;
    /* 14) a 태그나 span 태그에 버튼을 
    부여할 때 스타일이 깨지지 않도록
    display: block 처리해준다 */
    transition: 0.4s;
    /* 14) 가상 클래스에서 다른 효과를 줄때 
    다른 변환 효과에 시간주기 처리를 위해
    transition 처리를 해준다 */
  }
  .btn:hover {
    background-color: #333;
    color: #fff;
  }
  /* 14) 하이픈연속 2회로 반전 상태를 의미하는
  reverse 상태 스타일 처리를 해준다 
  기존 버튼의 반전상태 스타일*/
  /* 14) 기존 버튼이 .btn 으로 클래스 1개 10점
  아래의 반전 머튼은 .btn.btn--reverse
  클래스 2개 이므로 20점 덮어쓰기 가능하다! */
  .btn.btn--reverse {
    background-color: #333;
    color: #fff;
  }
  /* 14) 반전 버튼의 호버상태 스타일처리 */
  /* 가상 클래스까지 붙기 때문에 클래스3개 30점이다 */
  .btn.btn--reverse:hover {
    background-color: transparent;
    color: #333;
  }
  /* 14) 브라운 상태의 버튼 스타일 넣어주기 */
  /* 14) 부트스트랩이 이런식으로 스타일을 주는 것이다!! */
  .btn.btn--brown {
    color: #592b18;
    border-color: #592b18;
  }
  .btn.btn--brown:hover {
    color: #fff;
    background-color: #592b18;
  }
  /* 14) 금색 버튼 상태 추가해주기 */
  .btn.btn--gold {
    color: #d9aa8a;
    border-color: #d9aa8a;
  }
  .btn.btn--gold:hover {
    color: #fff;
    background-color: #d9aa8a;
  }
  /* 14) 흰색 버튼 상태 추가해주기 */
  .btn.btn--white {
    color: #fff;
    border-color: #fff;
  }
  .btn.btn--white:hover {
    color: #333;
    background-color: #fff;
  }
  
  /*BACK TO POSITION*/
  .back-to-position {
    opacity: 0;
    transition: 1s;
  }
  .back-to-position.to-right {
    transform: translateX(-150px);
  }
  .back-to-position.to-left {
    transform: translateX(150px);
  }
  .show .back-to-position {
    opacity: 1;
    transform: translateX(0);
  }
  .show .back-to-position.delay-0 {
    transition-delay: 0s;
  }
  .show .back-to-position.delay-1 {
    transition-delay: 0.3s;
  }
  .show .back-to-position.delay-2 {
    transition-delay: 0.6s;
  }
  .show .back-to-position.delay-3 {
    transition-delay: 0.9s;
  }
  
  /*HEADER*/
  header {
    width: 100%;
    position: fixed;
    /* 11) position: fixed, absolute 로 부여하면 
    width 가 최소한으로 줄어들게 된다 
    그래서 가로 너비를 꽉 채우기 위해 100% 로 설정한 것이다  */
    top: 0;
    z-index: 9;
    /* 14) 배지가 다른 색션보다 위로 올라오게 처리하기 위해
    위와 같이 처리 좀 부각시키기 위해 그냥 약간 높은 숫자인 9로 설정 */
    background-color: #f6f5f0;
    border-bottom: 1px solid #c8c8c8;
  }
  /* 08) 헤더의 inner 만 높이를 가지도록 설정 */
  header > .inner {
    height: 120px;
  }
  header .logo {
    height: 75px;
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    margin: auto;
  }
  /* 06) 아래와 같이 상위 태그 밑에 클래스나 태그 클래스를 넣어야
  컨트롤도 쉽고 동작범위도 특정하게 제한할 수 있다 */
  /* html 코드의 구조적인 것을 아래와 같이 구분하고 스타일을 정리하는 것도 좋은 방법이다 */
  header .sub-menu {
    position: absolute;
    top: 10px;
    right: 0;
    display: flex;
  }
  header .sub-menu ul.menu {
    /* 06) flex처리 및 폰트 변경처리 */
    font-family: Arial, sans-serif;
    display: flex;
  }
  header .sub-menu ul.menu li {
    /* 06) 아래 자식 요소에서 작대기 포지션처리를 위해
    부모 요소에서 아래와 같이 포지션 처리를 해준다 */
    position: relative;
  }
  header .sub-menu ul.menu li::before {
    /* 06) 가상요소 before 의 부모요소는 li 이다.
    여기서 옆에 구분작대기 처리를 해준다 */
    content: "";
    /* content 가 없으면 before 가 만들어지지 않는다 
    무조껀 있어야 하는 속성이다*/
    width: 1px;
    height: 12px;
    background-color: #e5e5e5;
    position: absolute;
    top: 0;
    bottom: 0;
    margin: auto;
  }
  header .sub-menu ul.menu li:first-child::before {
    /* 06) 첫번째 요쇼는 구분선이 없으므로 이렇게 처리 */
    display: none;
  }
  header .sub-menu ul.menu li a {
    padding: 11px 16px;
    display: block;
    /*06) a태그의 인라인 요소 -> 블록 요소로 변환처리 */
    /*06) 위의 padding 세로 부분을 적용하기 위해서 */
    font-size: 13px;
    color: #656565;
    /*06) 프로젝트의 모든 a 태그에 밑줄 없앨때 보통 최상단에
    태그 스타일로 지정해준다 최상단 a태그 참조 */
  }
  header .sub-menu ul.menu li a:hover {
    color: #000;
  }
  /* 07) 검색 부분 처리 */
  header .sub-menu .search {
    position: relative;
    /* 07) 위와 같이 배치 기준 처리 */
    height: 34px;
  }
  header .sub-menu .search input {
    width: 36px;
    height: inherit;
    /* 07) 상속받기 */
    padding: 4px 10px;
    border: 1px solid #ccc;
    box-sizing: border-box;
    border-radius: 5px;
    outline: none;
    /* 07) 포커스일때 테두리에 파랭이선을 없애주는 처리 */
    background-color: #fff;
    color: #777;
    font-size: 12px;
    transition: width 0.4s;
    /* 07) 가로속성만 전환 효과 처리 default 는 all */
  }
  header .sub-menu .search input:focus {
    width: 190px;
    border-color: #669900;
  }
  header .sub-menu .search .material-icons {
    height: 24px;
    position: absolute;
    top: 0;
    bottom: 0;
    right: 5px;
    margin: auto;
    transition: 0.4s;
    /* 포커스로 변경되는 전환처리 */
  }
  header .sub-menu .search.focused .material-icons {
    /* 07) 포커스 될때 main.js 에서 input 태그에 
    focused 클래스가 추가됨 (삭제도 main.js 에서 처리함) */
    opacity: 0;
  }
  /* 08) 메인메뉴 부분 */
  header .main-menu {
    position: absolute;
    bottom: 0;
    right: 0;
    /* 08) 위와 같이 부모요소(header)의 오른쪽 바닥으로 배치 처리 */
    z-index: 1;
    display: flex;
  }
  header .main-menu .item .item__name {
    padding: 10px 20px 34px 20px;
    font-family: Arial, sans-serif;
    /* 08) Arial이 없으면 sans-serif 를 적용한다는 의미 */
    font-size: 13px;
  }
  /* 08) hover 가상클래스를 item__name이 아닌 
  item에 적용시켜준다
  이유는 item__contents 에 영향이 가기 때문이다
  아래와 같이 중간에 가상클래스를 적용하는 것도 가능하다!! */
  header .main-menu .item:hover .item__name {
    background-color: #2c2a29;
    color: #669900;
    border-radius: 6px 6px 0 0;
    /* 08) 호버시 메인메뉴의 위쪽 2개만 둥글게 되어 위와 같이 적용 */
  }
  header .main-menu .item .item__contents {
    /* 08) 아래와 같이 호버 시 메뉴 뜨는 부분 
    레이아웃 배치를 잡아준다 */
    width: 100%;
    position: fixed;
    left: 0;
    display: none;
    /* 08) 위와 같이 처리하여 평상시엔 안보이게 처리 */
  }
  /* 08) 여기도 item에 가상클래스를 적용시켜준다 */
  header .main-menu .item:hover .item__contents {
    display: block;
    /* 08) hover 시 보이게 처리 */
  }
  header .main-menu .item .item__contents .contents__menu {
    background-color: #2c2a29;
  }
  /* 09) contents__menu > 태그 이런식으로 명확하게 부모의 한단계 자식요소를 
  선택하기 위애 아래와 같이 처리해준다 */
  header .main-menu .item .item__contents .contents__menu > ul {
    /* 09) 메뉴 리스트 ul 목록 내부의 li를 수평정렬처리해줌
    하위 선택자가 아닌 > 를 통해 바로 자식에 해당하는 명확한 위치 지정을 해준다 */
    padding: 20px 0;
    display: flex;
  }
  header .main-menu .item .item__contents .contents__menu > ul > li {
    /* 09) 수직으로 쌓이는 메뉴 리스트 너비 설정 */
    width: 220px;
  }
  header .main-menu .item .item__contents .contents__menu > ul > li h4 {
    padding: 3px 0 12px 0;
    font-size: 14px;
    color: #fff;
  }
  header .main-menu .item .item__contents .contents__menu > ul > li ul li {
    padding: 5px 0;
    font-size: 12px;
    color: #999;
    cursor: pointer;
  }
  header .main-menu .item .item__contents .contents__menu > ul > li ul li:hover {
    /* 09) 호버시 글씨 색상 변경처리 */
    color: #669900;
  }
  header .main-menu .item .item__contents .contents__texture {
    padding: 26px 0;
    font-size: 12px;
    /* 09) 글자는 자동 상속되기 때문에 여기서 하위글씨 처리까지 입력해준다 */
    background-image: url("../images/main_menu_pattern.jpg");
    /* 09) 이미지에서 처리가 되기 때문에 background-repeat 에 대한 
    설정은 따로 안해줘도 된다 */
  }
  /* 09) h4, p 태그 부분처리 */
  header .main-menu .item .item__contents .contents__texture h4 {
    color: #999;
    font-weight: 900;
  }
  header .main-menu .item .item__contents .contents__texture p {
    color: #64a70b;
    margin: 4px 0 14px;
  }
  /*BADGES*/
  header .badges {
    position: absolute;
    top: 132px;
    right: 12px;
    /* 11) 부모인 header 기준 위치 설정 */
  }
  header .badges .badge {
    border-radius: 10px;
    overflow: hidden;
    /* 11) 이미지가 위에서 둥글게 깎은 부분이 넘치지
    않도록 hidden 처리를 해줌 */
    margin-bottom: 12px;
    box-shadow: 4px 4px 10px rgba(0, 0, 0, 0.15);
    cursor: pointer;
  }
  
  
/*FOOTER*/
footer {
    background-color: #272727;
    border-top: 1px solid #333;
  }
  footer .inner {
    padding: 40px 0 60px 0;
  }
  footer .menu {
    display: flex;
    justify-content: center;
  }
  footer .menu li {
    position: relative;
  }
  footer .menu li::before {
    content: "";
    width: 3px;
    height: 3px;
    background-color: #555;
    position: absolute;
    top: 0;
    bottom: 0;
    right: -1px;
    margin: auto;
  }
  footer .menu li:last-child::before {
    display: none;
  }
  footer .menu li a {
    display: block;
    color: #ccc;
    font-size: 12px;
    font-weight: 700;
    padding: 15px;
  }
  footer .menu li a.green {
    color: #669900;
  }
  footer .btn-group {
    margin-top: 20px;
    display: flex;
    justify-content: center;
  }
  footer .btn-group .btn {
    font-size: 12px;
    margin-right: 10px;
  }
  footer .btn-group .btn:last-child {
    margin-right: 0;
  }
  footer .info {
    margin-top: 30px;
    text-align: center;
  }
  footer .info span {
    margin-right: 20px;
    color: #999;
    font-size: 12px;
  }
  footer .info span:last-child {
    margin-right: 0;
  }
  footer .copyright {
    color: #999;
    font-size: 12px;
    text-align: center;
    margin-top: 12px;
  }
  footer .logo {
    margin: 30px auto 0;
  }
  